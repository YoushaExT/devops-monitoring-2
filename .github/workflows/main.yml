name: Docker Build, Publish and Pull on EC2

on:
  push:
    paths:
      - 'frontend/**'
      - 'backend/**'
      - '.github/workflows/main.yml'

env:
  AWS_ROLE_ASSUME : "arn:aws:iam::214543393762:role/github-action-read-aws-ec2"
  AWS_REGION : "us-east-1"

jobs:
  docker-build-publish-then-pull-on-ec2:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: write

# Part 1 - Build and push the image

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: List files after checkout
      run: ls

    - name: Retrieve Docker build tag
      id: retrieve_tag
      run: |
        git fetch --tags
        DOCKER_BUILD_TAG=$(git tag --list 'docker-build-*' --sort=-v:refname | head -n 1)
        echo "Last Docker build tag: $DOCKER_BUILD_TAG"
        echo "DOCKER_BUILD_TAG=$DOCKER_BUILD_TAG" >> $GITHUB_OUTPUT
      shell: bash

    - name: Check for changes in frontend folder
      id: check_changes
      run: |
        DOCKER_BUILD_TAG="${{ steps.retrieve_tag.outputs.DOCKER_BUILD_TAG }}"
        if test -z "$DOCKER_BUILD_TAG"; then
          echo "No Docker build tag exists."
          echo "frontend_changed=true" >> $GITHUB_OUTPUT
        else
          echo "Docker build tag exists - comparing changes since $DOCKER_BUILD_TAG."
          if git diff --name-only "$DOCKER_BUILD_TAG"..HEAD | grep -q '^frontend/'; then
            echo "Changes detected in frontend folder."
            echo "frontend_changed=true" >> $GITHUB_OUTPUT
          else
            echo "No changes in frontend folder."
            echo "frontend_changed=false" >> $GITHUB_OUTPUT
          fi
        fi
      shell: bash
    
    - name: Set up Docker Buildx
      if: steps.check_changes.outputs.frontend_changed == 'true'
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: steps.check_changes.outputs.frontend_changed == 'true'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
      
    - name: Build and push frontend image
      if: steps.check_changes.outputs.frontend_changed == 'true'
      run: |
        cd frontend/
        ls
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest -f Dockerfile .
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest

    - name: Configure git user
      if: steps.check_changes.outputs.frontend_changed == 'true'
      run: |
        git config --global user.email "github-action-runner@example.com"
        git config --global user.name "Github Action Runner"
      shell: bash

    - name: Tag commit with Docker build information
      if: steps.check_changes.outputs.frontend_changed == 'true'
      run: |
        DOCKER_BUILD_TAG="docker-build-$(date +%Y%m%d%H%M%S)"
        git tag -a "$DOCKER_BUILD_TAG" -m "Docker build executed"
        git push --tags
        echo "DOCKER_BUILD_TAG=$DOCKER_BUILD_TAG" >> $GITHUB_OUTPUT
      shell: bash

# Part 2 - Pull the image on EC2

    - name: Setup Aws Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ env.AWS_ROLE_ASSUME }}
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: ga-role-session

    - name: List ec2 public ip
      id: list_ec2_public_ip
      run: |
        EC2_PUBLIC_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters 'Name=instance-state-name,Values=running' 'Name=tag:Name,Values=tf_created_ec2_ubuntu_frontend' --output text)
        echo "EC2 Instance IP: $EC2_PUBLIC_IP"
        echo "EC2_PUBLIC_IP=$EC2_PUBLIC_IP" >> $GITHUB_OUTPUT

    - name: Print out ip
      run: echo "${{ steps.list_ec2_public_ip.outputs.EC2_PUBLIC_IP }}"

    - name: SSH and update EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ steps.list_ec2_public_ip.outputs.EC2_PUBLIC_IP }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest
          docker stop frontend || true
          docker run -d -p 4000:4000 -v /var/www/backend/server/frontend:/app/frontend -w /app/frontend ${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest